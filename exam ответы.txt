https://github.com/ManasDajyrbekuulu/exam_1-python

1. Наследование – важная составляющая объектно-ориентированного программирования. Так или иначе мы уже сталкивались с ним, ведь объекты наследуют атрибуты своих классов. Однако обычно под наследованием в ООП понимается наличие классов и подклассов. Также их называют супер- или надклассами и классами, а также родительскими и дочерними классами.

2. Инкапсуляция — ограничение доступа к составляющим объект компонентам (методам и переменным). Инкапсуляция делает некоторые из компонент доступными только внутри класса.
           Инкапсуляция в Python работает лишь на уровне соглашения между программистами о том, какие атрибуты являются общедоступными, а какие — внутренними.

Модификаторы доступа: protected, private, public

3. Полиморфизм — очень важная идея в программировании. Она заключается в использовании единственной сущности(метод, оператор или объект) для представления различных типов в различных сценариях использования.
4. Абстракция  - это процесс сокрытия реальной реализации приложения от пользователя и акцентирования внимания только на том, как использовать приложение.
5. Композиция — это концепция, которая моделирует отношения. Она позволяет создавать сложные типы, комбинируя объекты других типов. Это означает, что класс Composite может содержать объект другого класса Component.
Композиция позволяет повторно использовать код, добавляя объекты к другим объектам, это его главное отличие от наследования
	
6. Итератор (iterator) - это объект, который возвращает свои элементы по одному за раз.
С точки зрения Python - это любой объект, у которого есть метод __next__. Этот метод возвращает следующий элемент, если он есть, или возвращает исключение StopIteration, когда элементы закончились.
Кроме того, итератор запоминает, на каком объекте он остановился в последнюю итерацию
7. Генераторы — это функции, которые можно приостанавливать и возобновлять во время их выполнения, при этом они возвращают объект, который можно итерировать. В отличие от списков, они    ленивы и поэтому работают с текущим элемент только по запросу. Таким образом, они намного эффективнее используют память при работе с большими наборами данных.
8. Метаклассы – это классы, экземпляры которых являются классами.
9. миксины — это классы, которые живут в обычном дереве наследования, но они остаются небольшими, чтобы избежать создания иерархий, которые слишком сложны для понимания программистом. В частности, миксины не должны иметь общих предков, кроме объекта, с другими родительскими классами.
10. Для создания  объекта — экземпляра класса (то есть, инстанцирования класса), достаточно вызвать класс по имени и задать параметры конструктора
11. В чем основное отличие двух следующих вариантов кода? Что произойдет при исполнении каждого из них? ВАЖНО: если Вы исполните этот код, Ваш компьютер может зависнуть! Найдите ответ без исполнения кода на компьютере.
 
Код 1: lst = [x for x in range(100000000000000000000000000000000000000000)]
 
Код 2: gnr = (x for x in range(100000000000000000000000000000000000000000))
 Оба кода являются list comprehension

12. 
